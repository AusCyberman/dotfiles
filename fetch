#!/bin/sh
LC_ALL=C
LANG=C
COLS=$(tput cols)
fg_c() {
    tput setaf "$1"
}
bg_c(){
    tput setab "$1"
}
fg_t(){
    printf  "\x1b[38;2;%s;%s;%s""m" "$@"
}
bg_t(){
    printf "\x1b[48;2;%1;%2;%3""m" "$@"
}



up () {
    printf "\033[%dA" "$1"
#    line=$((line-$1))
}
down () {
    printf "\033[%dB" "$1"
#    line=$((line+$1))
}

left () {
    printf "\033[%dD" "$1"
}
right () {
    printf "\033[%dC" "$1"
}


BOLD=$(tput bold)
ITALIC=$(tput sitm)
BLACK=239
WHITE=15

B_BG=$(bg_c $BLACK)
B_FG=$(fg_c $BLACK)
NORMAL="$(printf "\033[m")"
W_BG=$(bg_c $WHITE)
W_FG=$(fg_c $WHITE)




if command -v apt 1> /dev/null 
    then
        package_manager="apt"
        packages=$(apt list --installed 2> /dev/null | wc -l)
elif command -v nixos-rebuild 1> /dev/null  
    then
    packages=$(wc -l < /etc/current-system-packages)
    package_manager="nix"
elif command -v pacman 1> /dev/null 
then
    packages=$(pacman -Q | wc -l)
    package_manager="pacman"
fi



os="$(. /etc/os-release && printf "$PRETTY_NAME")"
kernel="$(uname -r)"
cpu="$(grep "model name" /proc/cpuinfo | awk -F ":" '{ print $2}' | uniq)"
gpu="$(nvidia-smi -L | awk -F ":" '{b=gensub(/\(.*/,"","g",$2); print $2}')"

lyric="$( shuf -n 1 < ~/Music/phoebe/lyricslist 2>&- )"
if [ -z "$lyric" ]; then
    lyric="phoebe bridgers"
fi


memused="$(free -m | awk '/Mem/ {print $3}')"
memtotal="$(free -m | awk '/Mem/ {print $2}')"
#main_color="$(fg_t 255 216 158)"
main_color="$(fg_t 158 203 219 )"
category="$main_color$BOLD"

eye_color="$(fg_c 236)"
if playerctl metadata > /dev/null 2>&1; then
    song=$(playerctl metadata --format "{{title}} - {{artist}}")
else
    song="${ITALIC}always listening to phoebe bridgers${NORMAL}"
fi
wm=$DESKTOP_SESSION
time=$(date "+%I:%M %p")
date=$(date "+%a %d %b %G")
uptime=$(uptime -p)



small () {
    _small=bob
    HEIGHT=6
    WIDTH=14
    cat <<EOF
      ${W_FG}▄▄▄▄▄${NORMAL}            
     ${W_BG}       ${NORMAL}      
    ${W_BG}  ${eye_color} ${W_BG} ${eye_color} ${W_BG}  ${NORMAL}         ${NORMAL} 
    ${W_BG}${B_FG}         ${NORMAL}         
    ${W_BG}${B_FG}  ,  ,   ${NORMAL}         
    ${W_BG}${B_FG}         ${NORMAL}         
    ${W_BG}${B_FG} ,   , , ${NORMAL}         
EOF
}

large () {
    HEIGHT=14
    WIDTH=15
down 1
cat << EOF
      ${W_FG}▄▄▄▄▄${NORMAL}            
     ${W_BG}       ${NORMAL}      
    ${W_BG}  ${eye_color} ${W_BG} ${eye_color} ${W_BG}  ${NORMAL}
    ${W_BG}${B_FG}         ${NORMAL}
    ${W_BG}${B_FG}  ,  ,   ${NORMAL}
    ${W_BG}${B_FG}         ${NORMAL}         
    ${W_BG}${B_FG} ,   , , ${NORMAL}         
    ${W_BG}${B_FG}         ${NORMAL}         
    ${W_BG}${B_FG}   ,   , ${NORMAL}         
    ${W_BG}${B_FG} |       ${NORMAL}         
    ${W_BG}${B_FG}  ,  | , ${NORMAL}         
    ${W_BG}${B_FG} ,  ,    ${NORMAL}         
    ${W_BG}${B_FG}         ${NORMAL}         
    ${W_BG}${B_FG}         ${NORMAL}         
    ${W_BG}${B_FG} |  |  | ${NORMAL}
EOF
down 1
}



print_phoebe () {
    down 1
    right 1
    WIDTH=27
#    HEIGHT=50
#    wezterm imgcat --width $WIDTH ~/backgrounds/phoeb.png
    HEIGHT=14
    wezterm imgcat --width $WIDTH ~/backgrounds/sadbridgers.png
#    wezterm imgcat --height $HEIGHT ~/backgrounds/sadbridgers.png



}

case $1 in
	-s)
		small
		;;
	-p)
		print_phoebe;;
	*)
		large
		;;
esac
line=$HEIGHT
up_c () {
    up "$1"
    line=$((line-$1))
}
down_c() {
    down "$1"
    line=$((line+$1))
}

offset () {
    left "$COLS"
    right $((WIDTH+7))
}

segment () {
    offset
    printf "%s" "$1"
    down_c 1
}
data () {
    _variable="$1"
    if [ -z "${2+x}" ]; then
        _variable_value=" $(eval "printf \"%s\" \"\$$1\"")"
    else
        _variable_value="$2"
    fi
    segment "$category$_variable:$NORMAL$_variable_value"
}



up_c $HEIGHT

segment "$ITALIC$main_color$lyric$NORMAL"

if [ -z $_small ]; then
    data "date"
else
    segment "${category}$time"
fi
data "os"
data "cpu" "$cpu"
data "mem" " ${memused}MB / ${memtotal}MB"
if [ -z $_small ]; then
    data "packages" " $packages ($package_manager)"
    data "gpu" "$gpu"
    data "kernel"
    data "wm"
    data "song"
    data "uptime"
fi


down $((HEIGHT-line))
printf "\n"
